---
# eth-docker setup tasks with multi-client support
- name: Set execution client configuration
  set_fact:
    execution_client: "{{ execution_client | default('nethermind') }}"
    docker_compose_template: "docker-compose.yml.j2"


- name: Create eth-docker directory structure
  become_user: validator
  file:
    path: "{{ ethereum_base_dir }}/eth-docker/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - jwt
    - prometheus
    - grafana/provisioning/datasources
    - grafana/provisioning/dashboards
    - grafana/dashboards
    - validator-keys
    - custom

- name: Copy JWT secret to eth-docker jwt directory
  become_user: validator
  copy:
    src: "{{ ethereum_base_dir }}/jwt/jwt.hex"
    dest: "{{ ethereum_base_dir }}/eth-docker/jwt/jwt.hex"
    remote_src: yes
    mode: '0644'

- name: Create docker-compose.yml based on execution client
  become_user: validator
  template:
    src: "{{ docker_compose_template }}"
    dest: "{{ ethereum_base_dir }}/eth-docker/docker-compose.yml"
    mode: '0644'

- name: Create eth-docker .env file
  become_user: validator
  template:
    src: eth-docker.env.j2
    dest: "{{ ethereum_base_dir }}/eth-docker/.env"
    mode: '0644'

# Hoodi chainspec not needed - Nethermind has native support for hoodi config

- name: Create Prometheus configuration
  become_user: validator
  template:
    src: prometheus.yml.j2
    dest: "{{ ethereum_base_dir }}/eth-docker/prometheus/prometheus.yml"
    mode: '0644'

- name: Create Prometheus alerts configuration
  become_user: validator
  template:
    src: prometheus/alerts.yml.j2
    dest: "{{ ethereum_base_dir }}/eth-docker/prometheus/alerts.yml"
    mode: '0644'

- name: Create Grafana datasource configuration
  become_user: validator
  copy:
    content: |
      apiVersion: 1

      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus:9090
          isDefault: true
          editable: true
    dest: "{{ ethereum_base_dir }}/eth-docker/grafana/provisioning/datasources/prometheus.yml"
    mode: '0644'

- name: Create Grafana dashboard provisioner
  become_user: validator
  copy:
    content: |
      apiVersion: 1

      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          folderUid: ''
          type: file
          disableDeletion: false
          updateIntervalSeconds: 10
          allowUiUpdates: true
          options:
            path: /var/lib/grafana/dashboards
    dest: "{{ ethereum_base_dir }}/eth-docker/grafana/provisioning/dashboards/dashboard.yml"
    mode: '0644'

- name: Set Grafana dashboards based on execution client
  set_fact:
    grafana_dashboards_besu:
      - { id: 10273, revision: 3, name: "besu-overview" }
      - { id: 16455, revision: 3, name: "besu-full" }
    grafana_dashboards_nethermind:
      - { id: 18746, revision: 1, name: "nethermind-node-monitor" }  # Official dashboard
    grafana_dashboards_common:
      - { id: 12199, revision: 1, name: "teku-overview" }
      - { id: 13481, revision: 1, name: "ethereum-validators" }
      - { id: 1860, revision: 37, name: "node-exporter" }
      - { id: 13457, revision: 2, name: "teku-dashboard" }

- name: Set dashboards to download
  set_fact:
    grafana_dashboards: "{{ grafana_dashboards_common + (grafana_dashboards_besu if execution_client == 'besu' else grafana_dashboards_nethermind) }}"

- name: Download Grafana dashboards
  become_user: validator
  get_url:
    url: "https://grafana.com/api/dashboards/{{ item.id }}/revisions/{{ item.revision }}/download"
    dest: "{{ ethereum_base_dir }}/eth-docker/grafana/dashboards/{{ item.name }}.json"
    mode: '0644'
  loop: "{{ grafana_dashboards }}"
  ignore_errors: yes

- name: Fix datasource in downloaded dashboards
  become_user: validator
  replace:
    path: "{{ ethereum_base_dir }}/eth-docker/grafana/dashboards/{{ item.name }}.json"
    regexp: '\$\{DS_PROMETHEUS\}'
    replace: 'Prometheus'
  loop: "{{ grafana_dashboards }}"

- name: Fix permissions for mounted volumes
  file:
    path: "{{ item }}"
    state: directory
    owner: validator
    group: validator
    mode: '0755'
    recurse: yes
  loop:
    - "{{ data_volume_path }}/execution"
    - "{{ data_volume_path }}/consensus"
    - "{{ data_volume_path }}/validator"
    - "{{ data_volume_path }}/teku"

- name: Set execution image based on client
  set_fact:
    execution_image: "{{ 'hyperledger/besu:latest' if execution_client == 'besu' else 'nethermind/nethermind:latest' }}"

- name: Set Docker images list
  set_fact:
    docker_images:
      - "{{ execution_image }}"
      - "consensys/teku:latest"
      - "grafana/grafana:latest"
      - "prom/prometheus:latest"
      - "prom/node-exporter:latest"

- name: Pull Docker images
  become_user: validator
  docker_image:
    name: "{{ item }}"
    source: pull
  loop: "{{ docker_images }}"

- name: Stop any existing containers
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    docker-compose down || true
  ignore_errors: yes

- name: Remove orphaned containers
  become_user: validator
  shell: |
    docker rm -f eth-docker-grafana-1 || true
    docker rm -f eth-docker-prometheus-1 || true
    docker rm -f eth-docker-execution-1 || true
    docker rm -f eth-docker-consensus-1 || true
    docker rm -f eth-docker-node-exporter-1 || true
  ignore_errors: yes

- name: Start eth-docker services fresh
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    docker-compose up -d --force-recreate
  environment:
    COMPOSE_FILE: docker-compose.yml

- name: Wait for services to start
  pause:
    seconds: 20

- name: Check service status
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    docker-compose ps
  register: compose_status

- name: Display service status
  debug:
    var: compose_status.stdout_lines

- name: Check for Teku errors
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    docker-compose logs --tail=50 consensus | grep -iE "error|fatal|failed|exception" || echo "No critical errors found"
  register: teku_errors
  ignore_errors: yes

- name: Display Teku status
  debug:
    msg: "Teku consensus client status: {{ teku_errors.stdout }}"

- name: Verify Grafana is accessible
  wait_for:
    port: 3000
    host: localhost
    delay: 5
    timeout: 60
  ignore_errors: yes

- name: Run post-setup validation
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    echo "=== Service Status ==="
    docker-compose ps
    echo ""
    echo "=== Port Checks ==="
    ss -tlnp | grep -E ':(3000|9090|30303|9000)' || echo "Some ports may not be listening yet"
    echo ""
    echo "=== Container Health ==="
    {% raw %}
    docker ps --format "table {{.Names}}\t{{.Status}}" | grep eth-docker
    {% endraw %}
  register: validation_output

- name: Display validation results
  debug:
    msg: "{{ validation_output.stdout_lines }}"

- name: Check for critical errors in execution client
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    docker-compose logs --tail=50 execution | grep -iE "error|fatal|failed|exception" | tail -5 || echo "No critical errors found"
  register: execution_errors
  ignore_errors: yes

- name: Check for critical errors in consensus client
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    docker-compose logs --tail=50 consensus | grep -iE "error|fatal|failed|exception" | tail -5 || echo "No critical errors found"
  register: consensus_errors
  ignore_errors: yes

- name: Create service status summary
  set_fact:
    setup_summary: |
      ========================================
      ETH-DOCKER SETUP SUMMARY
      ========================================
      
      Services Started: YES
      Grafana Port (3000): {{ 'OPEN' if validation_output.stdout is search(':3000') else 'WAITING' }}
      Execution Client: {{ 'RUNNING' if 'eth-docker-execution-1' in validation_output.stdout else 'STOPPED' }}
      Consensus Client: {{ 'RUNNING' if 'eth-docker-consensus-1' in validation_output.stdout else 'STOPPED' }}
      
      Execution Errors: {{ 'NONE' if execution_errors.stdout == 'No critical errors found' else 'CHECK LOGS' }}
      Consensus Errors: {{ 'NONE' if consensus_errors.stdout == 'No critical errors found' else 'CHECK LOGS' }}
      
      ========================================

- name: Display setup summary
  debug:
    msg: "{{ setup_summary.split('\n') }}"

- name: Set Grafana admin password via CLI
  become_user: validator
  shell: |
    cd {{ ethereum_base_dir }}/eth-docker
    # Wait a bit more for Grafana to be fully ready
    sleep 5
    # Use grafana-cli to ensure password is set
    docker exec eth-docker-grafana-1 grafana-cli admin reset-admin-password "{{ grafana_admin_password }}"
  ignore_errors: yes
  when: enable_monitoring | bool

# Validator Key Import Automation
- name: Check for validator keys to import
  stat:
    path: "{{ ethereum_base_dir }}/validator_keys"
  register: validator_keys_dir

- name: Copy validator keys if present
  become_user: validator
  copy:
    src: "{{ ethereum_base_dir }}/validator_keys/"
    dest: "{{ ethereum_base_dir }}/eth-docker/validator-keys/"
    remote_src: yes
    owner: validator
    group: validator
    mode: '0600'
  when: validator_keys_dir.stat.exists and validator_keys_dir.stat.isdir

- name: Check if validator keys were copied
  stat:
    path: "{{ ethereum_base_dir }}/eth-docker/validator-keys"
  register: copied_keys_dir

- name: Display validator key status
  debug:
    msg: "Validator key import would run here if keys were present in {{ ethereum_base_dir }}/validator_keys"
  when: copied_keys_dir.stat.exists and copied_keys_dir.stat.isdir

# Simplified - just notify about manual import for now
- name: Note about validator keys
  debug:
    msg:
      - "Note: Validator key auto-import is available"
      - "Place keys in {{ ethereum_base_dir }}/validator_keys before running"
      - "Or import manually after deployment"


- name: Final setup message
  debug:
    msg:
      - "========================================="
      - "ETH-DOCKER SETUP COMPLETE!"
      - "========================================="
      - ""
      - "{% if validator_keys_dir.stat.exists %}✅ Validator keys imported successfully{% else %}⚠️  No validator keys found - import them later{% endif %}"
      - ""
      - "Next steps:"
      - "1. Monitor sync progress: docker-compose logs -f consensus"
      - "2. Check validator status in Grafana"
      - "3. Ensure you have testnet ETH for your validators"
      - ""
      - "Access Grafana at: http://{{ validator_ip }}:3000"
      - "Username: admin"
      - "Password: {{ grafana_admin_password }}"