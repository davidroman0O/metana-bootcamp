# =====================================================
# EVENT ENTITIES (Immutable - Direct from Blockchain)
# =====================================================

type SpinInitiated @entity(immutable: true) {
  id: ID! # requestId-txHash
  requestId: BigInt!
  player: Player!
  reelCount: Int!
  betAmount: BigInt!
  vrfCostETH: BigInt!
  houseFeeETH: BigInt!
  prizePoolContribution: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type SpinCompleted @entity(immutable: true) {
  id: ID! # requestId-txHash
  requestId: BigInt!
  player: Player!
  reelCount: Int!
  reels: [Int!]!
  reelCombination: String! # e.g., "3-3-3" for easy querying
  payoutType: Int! # 0-7 mapping to PayoutType enum
  payoutTypeName: String! # LOSE, SMALL_WIN, etc.
  payout: BigInt!
  isJackpot: Boolean!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type VRFTransaction @entity(immutable: true) {
  id: ID! # requestId-txHash
  requestId: BigInt!
  estimatedCost: BigInt!
  actualCost: BigInt!
  markup: BigInt!
  ethPriceUSD: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type PlayerActivityEvent @entity(immutable: true) {
  id: ID! # player-milestone-txHash
  player: Player!
  totalSpins: BigInt!
  totalBet: BigInt!
  totalWon: BigInt!
  sessionSpins: BigInt!
  sessionBet: BigInt!
  sessionWon: BigInt!
  milestone: String!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type ChipsTransaction @entity(immutable: true) {
  id: ID! # txHash-logIndex
  player: Player!
  transactionType: String! # purchase, swap, win, withdraw, emergency
  chipsAmount: BigInt!
  ethValue: BigInt!
  exchangeRate: BigInt!
  ethPriceUSD: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type GameSession @entity(immutable: false) {
  id: ID! # player-sessionId
  player: Player!
  sessionId: BigInt!
  startTime: BigInt!
  endTime: BigInt
  duration: BigInt
  spinsCount: BigInt!
  totalBet: BigInt!
  totalWon: BigInt!
  netResult: BigInt! # won - bet
  endReason: String # timeout, withdrawal, manual, insufficient_balance
  isActive: Boolean!
  spins: [Spin!]! @derivedFrom(field: "session")
}

type PrizePoolChange @entity(immutable: true) {
  id: ID! # txHash-logIndex
  newTotalPrizePool: BigInt!
  amount: BigInt! # can be negative
  reason: Int! # 0: SPIN_CONTRIBUTION, 1: JACKPOT_PAYOUT, 2: ETH_DEPOSIT, 3: VRF_PAYMENT
  reasonName: String!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type JackpotWin @entity(immutable: true) {
  id: ID! # requestId-txHash
  player: Player!
  requestId: BigInt!
  amount: BigInt!
  prizePoolBefore: BigInt!
  prizePoolAfter: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type SystemConfigUpdate @entity(immutable: true) {
  id: ID! # parameter-blockNumber
  parameter: String!
  oldValue: BigInt!
  newValue: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# Standard ERC20 Events
type Transfer @entity(immutable: true) {
  id: ID! # txHash-logIndex
  from: Bytes!
  to: Bytes!
  value: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: ID! # txHash-logIndex
  owner: Bytes!
  spender: Bytes!
  value: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# =====================================================
# ANALYTICS ENTITIES (Mutable - Derived Data)
# =====================================================

type Player @entity(immutable: false) {
  id: ID! # player address
  address: Bytes!
  
  # Lifetime Statistics
  totalSpins: BigInt!
  totalBet: BigInt!
  totalWon: BigInt!
  totalLost: BigInt! # totalBet - totalWon
  netProfit: BigInt! # totalWon - totalBet
  roi: BigDecimal! # (totalWon - totalBet) / totalBet * 100
  
  # Current State
  currentChipsBalance: BigInt!
  pendingWinnings: BigInt!
  totalWithdrawn: BigInt!
  
  # Performance Metrics
  winRate: BigDecimal! # wins / totalSpins
  avgBetSize: BigDecimal! # totalBet / totalSpins
  avgWinSize: BigDecimal! # totalWon / winCount
  biggestWin: BigInt!
  biggestBet: BigInt!
  
  # Streak Tracking
  currentStreak: Int! # positive for wins, negative for losses
  longestWinStreak: Int!
  longestLossStreak: Int!
  
  # Reel Preferences
  favoriteReelCount: Int!
  reel3Spins: BigInt!
  reel4Spins: BigInt!
  reel5Spins: BigInt!
  reel6Spins: BigInt!
  reel7Spins: BigInt!
  
  # Payout Distribution
  lossCount: BigInt!
  smallWinCount: BigInt!
  mediumWinCount: BigInt!
  bigWinCount: BigInt!
  megaWinCount: BigInt!
  ultraWinCount: BigInt!
  specialComboCount: BigInt!
  jackpotCount: BigInt!
  
  # Time Tracking
  firstSpinTimestamp: BigInt!
  lastSpinTimestamp: BigInt!
  totalSessionCount: BigInt!
  totalSessionDuration: BigInt!
  avgSessionDuration: BigDecimal!
  
  # Milestones
  milestonesAchieved: [String!]!
  
  # Financial Activity
  totalChipsPurchased: BigInt!
  totalChipsSwapped: BigInt!
  totalETHSpent: BigInt!
  totalETHReceived: BigInt!
  
  # Relations
  spins: [Spin!]! @derivedFrom(field: "player")
  sessions: [GameSession!]! @derivedFrom(field: "player")
  chipsTransactions: [ChipsTransaction!]! @derivedFrom(field: "player")
  jackpotWins: [JackpotWin!]! @derivedFrom(field: "player")
}

type Spin @entity(immutable: false) {
  id: ID! # requestId
  requestId: BigInt!
  player: Player!
  session: GameSession
  
  # Spin Details
  reelCount: Int!
  reels: [Int!]!
  reelCombination: String!
  betAmount: BigInt!
  payout: BigInt!
  payoutType: Int!
  payoutTypeName: String!
  netResult: BigInt! # payout - betAmount
  
  # Costs
  vrfCostETH: BigInt!
  houseFeeETH: BigInt!
  prizePoolContribution: BigInt!
  
  # Timing
  initiatedTimestamp: BigInt!
  completedTimestamp: BigInt
  responseTime: BigInt # completedTimestamp - initiatedTimestamp
  
  # Status
  settled: Boolean!
  isJackpot: Boolean!
  
  # Block Info
  initiatedBlockNumber: BigInt!
  completedBlockNumber: BigInt
  initiatedTxHash: Bytes!
  completedTxHash: Bytes
}

type CasinoMetrics @entity(immutable: false) {
  id: ID! # "global"
  
  # Volume Metrics
  totalSpins: BigInt!
  totalBetsVolume: BigInt!
  totalPayoutsVolume: BigInt!
  
  # Revenue Streams
  totalHouseFees: BigInt!
  totalVRFMarkup: BigInt!
  totalSwapFees: BigInt!
  totalRevenue: BigInt!
  
  # Costs
  totalVRFCostsPaid: BigInt!
  totalJackpotsPaid: BigInt!
  totalCosts: BigInt!
  
  # Profitability
  grossProfit: BigInt!
  netProfit: BigInt!
  profitMargin: BigDecimal! # netProfit / totalRevenue
  
  # Treasury
  currentPrizePool: BigInt!
  contractETHBalance: BigInt!
  totalChipsSupply: BigInt!
  
  # Player Metrics
  uniquePlayers: BigInt!
  activePlayers24h: BigInt!
  
  # Economic Parameters
  currentBaseChipPriceUSD: BigInt!
  currentVRFCostUSD: BigInt!
  currentVRFMarkupBP: BigInt!
  currentHouseEdgeBP: BigInt!
  
  # Last Updated
  lastUpdateTimestamp: BigInt!
  lastUpdateBlock: BigInt!
}

type ReelStats @entity(immutable: false) {
  id: ID! # reelCount (3-7)
  reelCount: Int!
  
  # Usage Statistics
  totalSpins: BigInt!
  totalBets: BigInt!
  totalPayouts: BigInt!
  uniquePlayers: BigInt!
  
  # Performance Metrics
  winRate: BigDecimal!
  avgBetSize: BigDecimal!
  avgPayout: BigDecimal!
  actualHouseEdge: BigDecimal! # (totalBets - totalPayouts) / totalBets
  
  # Payout Distribution
  lossCount: BigInt!
  smallWinCount: BigInt!
  mediumWinCount: BigInt!
  bigWinCount: BigInt!
  megaWinCount: BigInt!
  ultraWinCount: BigInt!
  specialComboCount: BigInt!
  jackpotCount: BigInt!
  
  # Jackpot Tracking
  lastJackpotTimestamp: BigInt!
  lastJackpotPlayer: Bytes
  lastJackpotAmount: BigInt!
  
  # Popular Combinations
  mostFrequentWin: String
  mostFrequentLoss: String
}

type DailySnapshot @entity(immutable: false) {
  id: ID! # timestamp at start of day
  date: BigInt!
  
  # Volume Metrics
  spinsCount: BigInt!
  betsVolume: BigInt!
  payoutsVolume: BigInt!
  
  # Player Metrics  
  uniquePlayers: BigInt!
  newPlayers: BigInt!
  returningPlayers: BigInt!
  
  # Financial Metrics
  houseFees: BigInt!
  vrfMarkup: BigInt!
  vrfCosts: BigInt!
  jackpotsPaid: BigInt!
  netProfit: BigInt!
  
  # Token Metrics
  chipsPurchased: BigInt!
  chipsSwapped: BigInt!
  ethIn: BigInt!
  ethOut: BigInt!
  
  # Game Performance
  avgWinRate: BigDecimal!
  avgBetSize: BigDecimal!
  biggestWin: BigInt!
  biggestWinPlayer: Bytes
  
  # Reel Distribution
  reel3Spins: BigInt!
  reel4Spins: BigInt!
  reel5Spins: BigInt!
  reel6Spins: BigInt!
  reel7Spins: BigInt!
  
  # System State
  endingPrizePool: BigInt!
  endingETHBalance: BigInt!
  endingChipsSupply: BigInt!
}

type HourlySnapshot @entity(immutable: false) {
  id: ID! # timestamp at start of hour
  timestamp: BigInt!
  hour: Int! # 0-23
  dayOfWeek: Int! # 0-6
  
  # Core Metrics
  spinsCount: BigInt!
  betsVolume: BigInt!
  payoutsVolume: BigInt!
  uniquePlayers: BigInt!
  
  # Performance
  winRate: BigDecimal!
  avgBetSize: BigDecimal!
  netProfit: BigInt!
}

type VRFAnalytics @entity(immutable: false) {
  id: ID! # "global"
  
  # Request Statistics
  totalRequests: BigInt!
  pendingRequests: BigInt!
  fulfilledRequests: BigInt!
  failedRequests: BigInt!
  
  # Cost Analysis
  totalVRFCostETH: BigInt!
  totalMarkupCollected: BigInt!
  avgCostPerRequest: BigDecimal!
  minCost: BigInt!
  maxCost: BigInt!
  
  # Performance Metrics
  avgResponseTime: BigInt!
  minResponseTime: BigInt!
  maxResponseTime: BigInt!
  
  # Current Configuration
  currentCallbackGasLimit: BigInt!
  currentRequestConfirmations: Int!
  
  # Last Request Info
  lastRequestTimestamp: BigInt!
  lastFulfillmentTimestamp: BigInt!
}

type LeaderboardEntry @entity(immutable: false) {
  id: ID! # player-category-period
  player: Player!
  category: String! # volume, profit, winRate, streak, jackpots
  period: String! # daily, weekly, monthly, allTime
  rank: Int!
  value: BigInt!
  lastUpdated: BigInt!
}

# =====================================================
# HELPER ENTITIES
# =====================================================

type SystemState @entity(immutable: false) {
  id: ID! # "current"
  
  # Contract State
  isPaused: Boolean!
  owner: Bytes!
  implementation: Bytes!
  
  # Configuration
  payoutTablesAddress: Bytes!
  vrfWrapperAddress: Bytes!
  ethPriceFeedAddress: Bytes!
  
  # Last Activity
  lastSpinTimestamp: BigInt!
  lastConfigUpdateTimestamp: BigInt!
  
  # Contract Deployment
  deploymentBlock: BigInt!
  deploymentTimestamp: BigInt!
}